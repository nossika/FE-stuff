import{_ as e,M as o,p as c,q as l,R as s,t as n,N as t,a1 as p}from"./framework-5866ffd3.js";const i="/FE-stuff/assets/object-struct-79d6c99a.png",u={},r=p('<h1 id="v8-引擎" tabindex="-1"><a class="header-anchor" href="#v8-引擎" aria-hidden="true">#</a> V8 引擎</h1><h2 id="v8-是什么" tabindex="-1"><a class="header-anchor" href="#v8-是什么" aria-hidden="true">#</a> V8 是什么</h2><p>JS 有 ECMA 标准来指引它的一系列标准行为，比如模块加载规范、异步事件流程、各 API 不同输入下的表现等。但如何实现 JS 的标准行为，则由 JS 运行的宿主实现，宿主中管理和执行 JS 的模块称为 JS 引擎，而 V8 则是其中之一，其他 JS 引擎还有 Rhino、JavaScriptCore、Chakra 等。</p><p>V8 是 google 开源的 JS 引擎，由 C++ 编写，被应用于 Chrome、NodeJS 等应用，是目前应用最广泛的 JS 引擎。</p><h2 id="查阅-v8-源码" tabindex="-1"><a class="header-anchor" href="#查阅-v8-源码" aria-hidden="true">#</a> 查阅 V8 源码</h2>',5),d={href:"https://github.com/v8/v8",target:"_blank",rel:"noopener noreferrer"},k=s("h3",{id:"js-api-对应的源码",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#js-api-对应的源码","aria-hidden":"true"},"#"),n(" JS API 对应的源码")],-1),m={href:"https://github.com/v8/v8/tree/14bc07d1427de50421a672cfac5ded5ae2ee7bda/src/builtins",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/v8/v8/blob/14bc07d1427de50421a672cfac5ded5ae2ee7bda/src/builtins/array-map.tq#L227",target:"_blank",rel:"noopener noreferrer"},b={href:"https://tc39.github.io/ecma262/#sec-array.prototype.map",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/v8/v8/tree/14bc07d1427de50421a672cfac5ded5ae2ee7bda/src/torque",target:"_blank",rel:"noopener noreferrer"},g=s("h3",{id:"mac-搭建调试环境",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#mac-搭建调试环境","aria-hidden":"true"},"#"),n(" Mac 搭建调试环境")],-1),f={href:"https://v8.dev/docs/source-code",target:"_blank",rel:"noopener noreferrer"},_={href:"https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up",target:"_blank",rel:"noopener noreferrer"},y=p(`<p>2、安装 v8，关联依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> depot_tools
$ fetch v8
$ gclient <span class="token function">sync</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、编译</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> depot_tools/v8
$ tools/dev/gm.py arm64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译产物默认在 <code>out/</code> 中，可用 <code>out/arm64.release/d8</code> 执行 JS 脚本。</p><p>4、输出 xcode 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> depot_tools/v8
$ gn gen out/gn <span class="token parameter variable">--ide</span><span class="token operator">=</span><span class="token string">&quot;xcode&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的文件在 <code>out/gn</code>。</p><p>5、使用 xcode 调试</p><p>用 xcode 打开上一步输出的 <code>out/gn/all.xcodeproj</code> 文件。</p><p>xcode 工具栏 product -&gt; scheme -&gt; d8，启动编译并运行。</p><p>等待编译成功后，即可在 xcode 中的命令行执行 JS 脚本，并且可以用 xcode 在 v8 源码断点调试。</p><h2 id="调试-v8" tabindex="-1"><a class="header-anchor" href="#调试-v8" aria-hidden="true">#</a> 调试 V8</h2>`,13),j={href:"https://github.com/v8/v8/blob/master/src/runtime/runtime.h",target:"_blank",rel:"noopener noreferrer"},x=s("p",null,[n("对于以 V8 引擎实现的应用，加上"),s("code",null,"--allow-natives-syntax"),n("启动参数即可允许调试。")],-1),S=s("ul",null,[s("li",null,[n("node 可以通过"),s("code",null,"node --allow-natives-syntax"),n("命令执行程序")]),s("li",null,[n("chromium 可以通过"),s("code",null,'open -a Chromium --args --js-flags="--allow-natives-syntax"'),n("启动")])],-1),E={href:"https://github.com/GoogleChromeLabs/jsvu",target:"_blank",rel:"noopener noreferrer"},w=p('<h2 id="jit-just-in-time-编译优化" tabindex="-1"><a class="header-anchor" href="#jit-just-in-time-编译优化" aria-hidden="true">#</a> JIT（Just-In-Time）编译优化</h2><h3 id="解释执行-js-过程" tabindex="-1"><a class="header-anchor" href="#解释执行-js-过程" aria-hidden="true">#</a> 解释执行 JS 过程</h3><p>JS 是非编译型语言，其运行是直接执行源码，运行时在 JS 引擎内部实现”源码 -&gt; AST -&gt; 字节码 -&gt; 汇编（机器码）“编译过程。</p><p>但如果在运行前，就对全部代码执行上述编译过程，会占用较长时间，且需要较大内存来保存编译后的机器码（越底层的代码越冗长）。所以通常 JS 引擎的实现是翻译到“字节码”这一层，然后边运行边翻译成“机器码”来执行。</p><h3 id="预编译-turbofan" tabindex="-1"><a class="header-anchor" href="#预编译-turbofan" aria-hidden="true">#</a> 预编译（TurboFan）</h3><p>V8 引擎对这个过程做了 JIT 优化，即适时将某些较常运行的“字节码”优化并缓存，省去后续的编译耗时。</p><p>在 V8 中，解释执行“字节码”的模块是 Ignition，它在解释执行“字节码”的同时，也持续监控函数调用情况，当某个函数被高频调用且参数类型也稳定，它会认为这段“字节码”有优化必要，会将其优化并缓存优化结果供后续使用。</p><p>V8 初步优化“字节码”的动作叫 Baseline，它会尝试将“字节码”按固定参数类型优化，产物还是“字节码”，但执行速度相比“原始字节码“要快些。</p>',8),M={href:"https://github.com/v8/v8/blob/c8fad7737ced5c262dee11610164f27a8ca155fe/src/runtime/runtime.h#L1019",target:"_blank",rel:"noopener noreferrer"},P=s("p",null,"对于编写代码的参考意义是：对于热点代码片段，可将其抽离成独立函数，并使其入参类型保持稳定。这样才能最大化利用 JIT 的优化。",-1),J=s("code",null,"%GetOptimizationStatus",-1),V={href:"https://github.com/v8/v8/blob/c8fad7737ced5c262dee11610164f27a8ca155fe/src/runtime/runtime.h#L1012",target:"_blank",rel:"noopener noreferrer"},F=s("code",null,"100001",-1),L=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token function">GetOptimizationStatus</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 --- 初始状态，无优化</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token function">GetOptimizationStatus</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100000000000001 --- Baseline 优化</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token function">GetOptimizationStatus</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 110001 --- TurboFan 优化</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token function">GetOptimizationStatus</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 --- 回退到无优化</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>破坏优化的一个例子，同样的两段逻辑，破坏优化后执行效率会显著降低：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;loop 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;loop 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 477.609ms</span>

<span class="token comment">// 破坏入参稳定性，回退到无优化状态</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;loop 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;loop 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2.044s</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象成员的存储优化" tabindex="-1"><a class="header-anchor" href="#对象成员的存储优化" aria-hidden="true">#</a> 对象成员的存储优化</h2><h3 id="成员分类" tabindex="-1"><a class="header-anchor" href="#成员分类" aria-hidden="true">#</a> 成员分类</h3><p>因为 JS 里实现同一类对象的手段是”原型“，没有严格意义上的类，且对象成员（甚至其原型）可以在运行时变化，所以无法在编译时就为对象分配好固定的空间。所以只能在运行时，动态为对象每个成员分配空间，所以访问对象成员就有了位置查找的消耗。</p><p>V8 的对象以 3 类结构来存储成员数据</p><ul><li>elements: 索引属性，以数字为下标的成员</li><li>properties: 命名属性，以常规字符串命名的成员</li><li>inline-object properties: 直接存储于对象本身，线性空间，查找更快，但仅能存下少量数据，有较多限制。无法使用 inline-object properties 就会自动转存 properties</li></ul><p><img src="`+i+`" alt="object-struct"></p><blockquote><p>遍历对象的成员时（比如<code>Object.keys(obj)</code>），ECMA 标准规定一定是先遍历 elements，并且以数字升序顺序遍历，再遍历 properties，按声明顺序遍历。</p></blockquote><h3 id="隐藏类-hiddenclass" tabindex="-1"><a class="header-anchor" href="#隐藏类-hiddenclass" aria-hidden="true">#</a> 隐藏类（HiddenClass）</h3><p>对于 properties 数据，其存储是词典结构，查找成员有一定消耗，对于同一类对象的成员位置是固定的，每次都执行这样的查找有点多余。如果能有个缓存来记住每个成员的位置就好了。</p><p>V8 为每个对象创造了“隐藏类”，“隐藏类”中保存了 key（成员命名）和其对应的内存偏移值，知道 key 就能直接根据内存偏移值取到数据。对于有相同“隐藏类”的对象，其取值可省去一次查找的过程。“隐藏类”本身是线性空间，编译期 V8 会把对象的 key 编译为索引，与“隐藏类”的线性结构关联，所以对“隐藏类”本身的访问极快。</p><p>隐藏类是有序创建的，比如对于同样的一个初始对象，先赋值 a 再赋值 b，和先赋值 b 再赋值 a，两者最终得到的隐藏类是不同的。</p><p>对于编写代码的参考意义是：对于同一类对象，成员声明顺序应保持稳定，如果有空值也显式用 undefined 声明。这样才能尽可能利用隐藏类。</p><p>可以执行以下代码，观察隐藏类（<code>%DebugPrint</code> 返回的 map 地址）的复用情况：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a -&gt; b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 生成隐藏类 Map(a)</span>
obj1<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 生成隐藏类 Map(a, b)</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - map: 0x28d5385b7599 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span>



console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b -&gt; a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 生成隐藏类 Map(b)</span>
obj2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 生成隐藏类 Map(b, a)</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// map: 0x36c5d97f7629 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span>



console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a -&gt; b -&gt; c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj3<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
obj3<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 🌟 复用前面的 Map(a, b)</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - map: 0x28d5385b7599 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span>

obj3<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">// 基于前面的 Map(a, b) 拓展出新的 Map(a, b, c)</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - map: 0x28d5385b7671 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a -&gt; c vs a -&gt; b -&gt; c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj4<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
obj4<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">// 生成隐藏类 Map(a, c)</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - map: 0x36c5d97f76b9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span>

<span class="token keyword">const</span> obj5 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj5<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
obj5<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
obj5<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token comment">// 🌟 复用前面的 Map(a, b, c)</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj5<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - map: 0x36c5d97f7671 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a + b vs b + a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj6 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 生成隐藏类 Map(ab)</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - map: 0x36c5d97f7749 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span>

<span class="token keyword">const</span> obj7 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 生成隐藏类 Map(ba)</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj7<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - map: 0x36c5d97f77d9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span>

<span class="token keyword">const</span> obj8 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 🌟 复用隐藏类 Map(ab)</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - map: 0x36c5d97f7749 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在 chrome 的 memory 抓取内存快照，查看对象的结构，其中<code>system / Map</code>指向的就是其隐藏类。</p><h3 id="快属性-fastproperties" tabindex="-1"><a class="header-anchor" href="#快属性-fastproperties" aria-hidden="true">#</a> 快属性（FastProperties）</h3><p>在<a href="#%E6%88%90%E5%91%98%E5%88%86%E7%B1%BB">成员分类</a>中有提到，对象的命名成员可能会被存储到 properties 或者 inline-object properties，当成员都被存储到 inline-object properties 时，即称这个对象拥有“快属性”。</p><p>“快属性”是以线性空间存储，直接可通过索引访问，因此访问最快。通常对对象成员的删除操作会破坏这个线性空间，此时 V8 会把成员全部转存到 properties 中，导致查找变慢。</p><p>执行以下代码，通过<code>%HasFastProperties</code>追踪此时对象是否具有“快属性”：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token function">HasFastProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true - 简单对象初始拥有快属性</span>

obj<span class="token punctuation">.</span>xxx <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;loop 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;loop 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 49.585ms</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token function">HasFastProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true - 增加一个成员后，依然拥有快属性</span>

Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token function">HasFastProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false - 删除一个成员后，破坏快属性</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;loop 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;loop 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 472.515ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="快数组-fixedarray" tabindex="-1"><a class="header-anchor" href="#快数组-fixedarray" aria-hidden="true">#</a> 快数组（FixedArray）</h3><p>JS 中的数组其实也是对象的一种特殊表现形式，其主要使用对象的 elements 结构来存储数组数据。</p><p>V8 内部的数组有两种模式</p><ul><li><p>FixedArray：快数组，以类似传统数组的结构存储成员，有连续的空间，通过索引查找极快</p></li><li><p>NumberDictionary：慢数组，以字典表的结构存储成员，索引仅是字典的键，查找有一定消耗</p></li></ul><p>V8 会尽量地以“快数组”的模式实现数组，但如果数组并非紧密排列，则其可能会降级为“慢数组”模式，以节省不必要的空间占用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 分配长度为 3 的 FixedArray</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - elements: 0x1e013b9910e1 &lt;FixedArray[3]&gt;</span>

arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加入两个成员，并自动预扩容为 23 的 FixedArray，剩下部份留空备用</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - elements: 0x250961a49611 &lt;FixedArray[23]&gt; ... 5-22: 0x20b7a4681669 &lt;the_hole&gt;</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;loop 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;loop 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6.352ms</span>

arr<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span> <span class="token comment">// 转化为稀疏数组，以 NumberDictionary 结构存储</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// - elements: 0x250961a497c9 &lt;NumberDictionary[52]&gt;</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;loop 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;loop 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 140.772ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动垃圾回收-gc、garbage-collection" tabindex="-1"><a class="header-anchor" href="#自动垃圾回收-gc、garbage-collection" aria-hidden="true">#</a> 自动垃圾回收（GC、Garbage Collection）</h2><p>V8 为便于 GC，采用了分代内存：</p><ul><li>新生代区：大部分对象在此区，区域小但垃圾回收频繁</li><li>老生代区：从新生代晋升而来的生存周期长的对象</li><li>大对象区：占用空间较大的对象</li><li>代码区：唯一拥有执行权限的区域</li></ul><blockquote><p>考虑点：</p><ul><li>大部分对象在内存的存活时间很短，可能只被用一次即可废弃</li><li>活跃的对象，预期其后续存活时间也会更长</li></ul></blockquote><p>nodeJS 中允许手动触发 GC：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">node</span> --expose-gc
<span class="token operator">&gt;</span> process.memoryUsage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 查看内存
<span class="token operator">&gt;</span> global.gc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 触发 GC
<span class="token operator">&gt;</span> process.memoryUsage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 再次查看内存
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="新生代区" tabindex="-1"><a class="header-anchor" href="#新生代区" aria-hidden="true">#</a> 新生代区</h3><p>采用复制算法（scavenge）做 GC</p><p>内存空间分为两半---from 区和 to 区，from 区是处于使用状态的内存，新对象都会分配到 from 区，当 GC 开始时，引擎会扫描出活跃对象（从 root 作用域开始，遍历其能访问到的所有对象，即为尚在活跃的对象），识别到活跃对象的同时，直接复制到 to 区，这样 to 区就都为活跃对象，然后交换 from 区和 to 区内容，释放 to 区。</p><p>由于此区大部分对象是非活跃，所以复制操作代价小，空间上有一半是处于空置状态（to 区），但因为此区空间本身就小，所以可以接受这种空置，这个牺牲带来的好处是只需要做一次扫描复制的遍历，并且复制后的内存自然紧密排列；而不用进行标记+清除两次遍历，且还产生内存碎片问题（清除后内存空间不连续）。</p><p>当此区的对象经过多次 GC 依然存活，说明其生命周期较长，对象会被移动到老生代区，此过程称为对象晋升。</p><h3 id="老生代区" tabindex="-1"><a class="header-anchor" href="#老生代区" aria-hidden="true">#</a> 老生代区</h3><p>采用标记-清除算法（mark-sweep）做 GC</p><p>不再采用复制算法，因为此区空间较大，空置一半的空间太浪费，且大量活跃对象的复制代价大。此算法采用 DFS 遍历来标记活跃对象，标记结束后将非活跃对象（未被标记的对象）直接清除。</p><p>标记-清除操作会产生内存碎片，当内存空间不足时，执行标记-整理算法（mark-compact）来整理内存。</p><h3 id="stw-stop-the-world" tabindex="-1"><a class="header-anchor" href="#stw-stop-the-world" aria-hidden="true">#</a> STW（Stop-The-World）</h3><p>垃圾回收过程需要完全暂停 JS 的执行，这个动作叫做 STW，如果垃圾回收耗时较长，会造成 JS 的卡顿。</p><p>新生代区由于空间较小，一般影响不大；老生代区则可能有较大影响。</p><p>为降低对老生代区的影响，V8 将标记过程拆分为多个子标记过程，让标记过程和 JS 逻辑交替执行，直到标记完成，此过程也称为“增量标记”。</p><p>为什么可以允许 JS 继续执行，这样打的标记不就不再可靠了吗？因为垃圾回收的特点是：宁愿放过，也不错杀。JS 的继续执行，只可能将原本标记为活跃的对象释放，而不可能将原本标记为废弃的对象继续使用。被误放过的对象会继续被下次的垃圾回收处理，没啥影响。</p>`,49);function T(C,D){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,s("p",null,[n("V8 源码仓库："),s("a",d,[n("https://github.com/v8/v8"),t(a)])]),k,s("p",null,[n("JS 大部分内置的 API 实现都在 "),s("a",m,[n("/src/builtins"),t(a)]),n(" 目录内，可通过 API 名搜索到源码。")]),s("p",null,[n("比如数组的 map 方法，可以用 Array.prototype.map 关键字搜索，找到其源码位于 "),s("a",v,[n("/src/builtins/array-map.tq"),t(a)]),n("，注释处附有对应的 ecma 的标准文件 "),s("a",b,[n("sec-array.prototype.map"),t(a)]),n("。")]),s("p",null,[n("其中 .tq 结尾的文件是以 Torque 语言编写（一种 V8 内部的 DSL），实际构建时会先被 "),s("a",h,[n("Torque 编译器"),t(a)]),n(" 转化为 C++ 代码，再最终编译为二进制的机器码。")]),g,s("p",null,[n("参考 v8 官方指引："),s("a",f,[n("https://v8.dev/docs/source-code"),t(a)])]),s("p",null,[n("1、下载调试工具 "),s("a",_,[n("depot_tools"),t(a)])]),y,s("p",null,[n("V8 原生提供了 debug API，"),s("a",j,[n("runtime.h"),t(a)]),n("中列出了所有的调试命令。")]),x,S,s("p",null,[n("有个 "),s("a",E,[n("jsvu"),t(a)]),n(" 开源库，可方便地下载不同 JS 引擎到本地进行调试。")]),w,s("p",null,[n("如果函数依然被高频调用且入参稳定，V8 会将其更进一步优化为”机器码“，负责将“字节码”编译为“机器码”的动作叫做 TurboFan，被预编译的函数会得到 "),s("a",M,[n("TurboFanned"),t(a)]),n(" 的状态，这里编译后的“机器码”其实还带了前置的、对函数入参的 checkpoint 判断。后续函数调用都会尝试用此机器码执行，但如果 checkpoint 阶段发现出现入参类型不同，无法直接用此“机器码”，则会回退到“原始字节码”执行。当多次出现这种回退，V8 会放弃这个编译优化。")]),P,s("p",null,[J,n("可以获取函数的优化状态，得到结果是一个最多 20 位的二进制数字，每一位的含义可参考 V8 源码的 "),s("a",V,[n("OptimizationStatus"),t(a)]),n("。比如 "),F,n(" 表示进入了 TurboFan 优化（倒数第 6 位为 1）。")]),L])}const O=e(u,[["render",T],["__file","engine.html.vue"]]);export{O as default};
