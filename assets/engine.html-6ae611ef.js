import{_ as t,M as o,p as c,q as i,R as a,t as n,N as e,a1 as p}from"./framework-5866ffd3.js";const l={},r=p('<h1 id="v8引擎" tabindex="-1"><a class="header-anchor" href="#v8引擎" aria-hidden="true">#</a> V8引擎</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>V8是google开源的JS引擎，由C++编写，被应用于Chrome、NodeJS等，其他JS引擎有Rhino、JavaScriptCore、Chakra等。</p><p>V8中做的性能优化有：</p><ul><li><p>JIT编译优化</p></li><li><p>隐藏类</p></li><li><p>高效垃圾回收</p></li><li><p>etc.</p></li></ul><blockquote><p>一个可调试V8的库：https://github.com/GoogleChromeLabs/jsvu</p></blockquote><h2 id="查阅-v8-源码" tabindex="-1"><a class="header-anchor" href="#查阅-v8-源码" aria-hidden="true">#</a> 查阅 V8 源码</h2>',7),u={href:"https://github.com/v8/v8",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/v8/v8/tree/14bc07d1427de50421a672cfac5ded5ae2ee7bda/src/builtins",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/v8/v8/blob/14bc07d1427de50421a672cfac5ded5ae2ee7bda/src/builtins/array-map.tq#L227",target:"_blank",rel:"noopener noreferrer"},b={href:"https://tc39.github.io/ecma262/#sec-array.prototype.map",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/v8/v8/tree/14bc07d1427de50421a672cfac5ded5ae2ee7bda/src/torque",target:"_blank",rel:"noopener noreferrer"},v=a("h3",{id:"mac-搭建源码调试环境",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#mac-搭建源码调试环境","aria-hidden":"true"},"#"),n(" mac 搭建源码调试环境")],-1),h={href:"https://v8.dev/docs/source-code",target:"_blank",rel:"noopener noreferrer"},g={href:"https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up",target:"_blank",rel:"noopener noreferrer"},f=p(`<p>2、安装 v8，关联依赖</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> depot_tools
$ fetch v8
$ gclient <span class="token function">sync</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、编译</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> depot_tools/v8
$ tools/dev/gm.py arm64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译产物默认在 <code>out/</code> 中，可用 <code>out/arm64.release/d8</code> 执行 JS 脚本。</p><p>4、输出 xcode 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">cd</span> depot_tools/v8
$ gn gen out/gn <span class="token parameter variable">--ide</span><span class="token operator">=</span><span class="token string">&quot;xcode&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的文件在 <code>out/gn</code>。</p><p>5、使用 xcode 调试</p><p>用 xcode 打开上一步输出的 <code>out/gn/all.xcodeproj</code> 文件。</p><p>xcode 工具栏 product -&gt; scheme -&gt; d8，启动编译并运行。</p><p>等待编译成功后，即可在 xcode 中的命令行执行 JS 脚本，并且可以用 xcode 在 v8 源码断点调试。</p><h2 id="v8-特性" tabindex="-1"><a class="header-anchor" href="#v8-特性" aria-hidden="true">#</a> V8 特性</h2><h3 id="just-in-time编译-内联缓存" tabindex="-1"><a class="header-anchor" href="#just-in-time编译-内联缓存" aria-hidden="true">#</a> Just-In-Time编译（内联缓存）</h3><p>JS是弱类型动态语言，在源码生成AST以后，就开始边解释边执行，且因为变量类型不固定，运行时需边判断类型边操作，由此有了优化空间。</p><p>JIT加入<strong>监视器</strong>来分析代码片段的运行情况，如果某代码片段被执行次数越多，则对其进行越深层的优化。因为优化也需要代价，所以加入监视器来对优化收益更高的代码进行更多优化操作，以提高整体执行效率。</p><p>当某代码片段进入“warm”阶段，JIT对其进行<strong>基线编译</strong>并缓存，下次进入此代码片段时，如果变量类型没变，则直接使用这个编译后的版本来运行，节省再次执行解释的时间。</p><p>当某代码片段进入“hot”阶段，JIT会对其作更高效的<strong>优化编译</strong>，为此需要做一些假设（比如每次某变量使用的对象都有相同结构），针对这一假设再作优化程度更高的编译。如果某次执行中发现假设出错（比如对象结构变了），则放弃优化编译退回基线编译。如果代码片段多次从优化编译退回基线编译，则放弃对此片段的优化编译。</p><p>代码编译的优化也称<strong>内联缓存</strong>，根据数据结构的类型是单一还是多个，分为单态和多态，单态的效率大于多态，也就是说对于同个函数调用，其数据结构越单一越好。</p><h3 id="隐藏类-快属性" tabindex="-1"><a class="header-anchor" href="#隐藏类-快属性" aria-hidden="true">#</a> 隐藏类（快属性）</h3><p>因为JS的对象只有原型，没有严格意义上的类，所以无法在编译时就为对象分配好固定的空间。</p><p>V8里的对象内部有两类存储结构，elements和properties：elements的key为数字，可以通过key直接得出内存偏移量来找到对应value；properties为字典表（哈希表），需要对key做一次转换才能得出value的内存位置。数据会尽可能地存储到elements结构里，比如常规的紧密数组、以数字为key的数据（且数据量小）等。</p><p>对于properties类型的数据而言，如果每次访问value都去翻译一次key来做内存位置查找，对于大量结构相同的数据是一种浪费。所以V8为properties加上了一个隐藏类，隐藏类里包含了其key值和对应的位置信息，把同结构的properties指向同一个隐藏类，这样在对properties读key时，只需从其隐藏类中直接获取这个key的位置即可。</p><p>隐藏类会在运行时改变，对象的创建、赋值key、赋值顺序、删除key等操作都可能带来隐藏类的改变。对于同一类对象，应尽量让它们都指向同一隐藏类，来提升性能。</p><p>good case:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 此时obj隐藏类为shape(a)</span>
    obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 此时obj隐藏类加上了b，为shape(a, b)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">{</span>
    obj <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
      <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 这种写法会使obj隐藏类直接为shape(a, b)，也和上面一致</span>

    obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// obj还是保持着隐藏类shape(a, b)的结构</span>
  <span class="token punctuation">}</span> 

  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全部的obj都指向同一隐藏类shape(a, b)，访问obj.a时不必再重复计算a的位置，直接从隐藏类中获取</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bad case:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// shape(a)</span>
    obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// shape(a, b)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// shape(b)</span>
    obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// shape(b, a)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// shape(a)</span>
    obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// shape(a, b)</span>
    obj<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// shape(a, b, c)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condition4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// shape(a, b)</span>
    Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 隐藏类回退到shape(a)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 以上各逻辑分支创造出的obj隐藏类都各不相同</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在chrome的memory抓取内存快照，查看对象的结构，其中<code>system / Map</code>指向的就是其隐藏类。</p><h3 id="快数组" tabindex="-1"><a class="header-anchor" href="#快数组" aria-hidden="true">#</a> 快数组</h3><p>通常意义的数组是指元素类型一致、占用空间一致、内存上连续的一组数据。这样初始化时，通过容量大小即可确定分配的内存空间；通过数组下标访问元素时，仅需通过下标值乘以占用空间就能得到内存偏移量，即可获取到对应元素。</p><p>而JS的数组是可以存放不同类型的元素的，且不需要提前声明容量。此类场景更适合用哈希表实现。</p><p>所以V8内部对于数组有两种实现：FixedArray（快数组） / HashTable（慢数组）。FixedArray即通常意义的数组，有元素空间大小一致、内存连续等特性；HashTable即哈希表封装而成的数组，也提供了pop、push等方法，但内存非连续。V8还对FixedArray做了自动扩缩容，在数组操作过程中动态改变数组容量。</p><p>V8会尽可能地将数组以FixedArray的形式实现，来使数组有更好的性能。但需要满足一些条件：元素都为某几类元素、大部分元素排列紧密等。V8运行过程中会适时根据条件，把数组实现在FixedArray和HashTable互相切换。</p><h4 id="稀疏数组" tabindex="-1"><a class="header-anchor" href="#稀疏数组" aria-hidden="true">#</a> 稀疏数组</h4><p>前面提到”数组紧密排列“，数组有紧密数组（PACKED）和稀疏数组（HOLEY）的区别。比如下面方式即可构造出一个稀疏数组：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const arr = [1];
arr[1000] = 1;
console.log(arr); // [1, empty × 999, 1]
arr.forEach(n =&gt; console.log(n)); // 1, 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组中未被初始化的元素即为稀疏元素，用empty表示，并且遍历时会被跳过。</p><p>如果一个FixedArray数组中加入大量稀疏元素，则V8会将底层结构切换为HashTable，来减少内存空间占用。</p><h3 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h3><p>V8采用了分代GC，将内存划分为：</p><ul><li>新生代区：大部分对象在此区，区域小但垃圾回收频繁</li><li>老生代区：从新生代晋升而来的生存周期长的对象</li><li>大对象区：占用空间较大的对象</li><li>代码区：唯一拥有执行权限的区域</li></ul><h4 id="新生代区" tabindex="-1"><a class="header-anchor" href="#新生代区" aria-hidden="true">#</a> 新生代区</h4><p>采用复制算法（scavenge）做垃圾回收（GC）</p><p>内存空间分为两半---from区和to区，from区是处于使用状态的内存，新对象都会分配到from区，当GC开始时（如from区存满时），引擎会扫描出活跃对象（从root开始扫描，从root作BFS遍历其能访问的所有对象），复制到to区，这样to区就都为活跃对象，然后交换from区和to区内容，释放to区。</p><p>由于此区大部分对象是非活跃，所以复制操作代价小，空间上有一半是处于空置状态（to区），但因为此区空间本身就小，所以可以接受这种空置，牺牲空间带来的好处是只需要作一次复制遍历，而不用进行标记+清除两次遍历。</p><p>当此区的对象经过多次GC依然存活，说明其生命周期较长，对象会被移动到老生代区，此过程称为对象晋升。</p><h4 id="老生代区" tabindex="-1"><a class="header-anchor" href="#老生代区" aria-hidden="true">#</a> 老生代区</h4><p>采用标记-清除算法（mark-sweep）做GC</p><p>不再采用复制算法，因为此区空间较大，空置一半的空间太浪费，且大量活跃对象的复制代价大。此算法采用DFS遍历来标记活跃对象，标记结束后将非活跃对象（未被标记的对象）直接清除。</p><p>标记-清除操作会产生内存碎片（内存空间不连续），当空间不足时执行标记-整理算法（mark-compact）来整理内存。</p>`,51);function y(_,x){const s=o("ExternalLinkIcon");return c(),i("div",null,[r,a("p",null,[n("V8 源码仓库："),a("a",u,[n("https://github.com/v8/v8"),e(s)])]),a("p",null,[n("JS 大部分内置的 API 实现都在 "),a("a",d,[n("/src/builtins"),e(s)]),n(" 目录内，可通过 API 名搜索到源码。")]),a("p",null,[n("比如数组的 map 方法，可以用 Array.prototype.map 关键字搜索，找到其源码位于 "),a("a",k,[n("/src/builtins/array-map.tq"),e(s)]),n("，注释处附有对应的 ecma 的标准文件 "),a("a",b,[n("sec-array.prototype.map"),e(s)]),n("。")]),a("p",null,[n("其中 .tq 结尾的文件是以 Torque 语言编写（一种 V8 内部的 DSL），实际构建时会先被 "),a("a",m,[n("Torque 编译器"),e(s)]),n(" 转化为 C++ 代码，再最终编译为二进制的机器码。")]),v,a("p",null,[n("参考 v8 官方指引："),a("a",h,[n("https://v8.dev/docs/source-code"),e(s)])]),a("p",null,[n("1、下载调试工具 "),a("a",g,[n("depot_tools"),e(s)])]),f])}const w=t(l,[["render",y],["__file","engine.html.vue"]]);export{w as default};
