import{_ as e,p as a,q as p,a1 as r}from"./framework-5866ffd3.js";const h={},d=r('<h1 id="experience" tabindex="-1"><a class="header-anchor" href="#experience" aria-hidden="true">#</a> experience</h1><h4 id="产品、技术平衡" tabindex="-1"><a class="header-anchor" href="#产品、技术平衡" aria-hidden="true">#</a> 产品、技术平衡</h4><h4 id="推动技术、产品抽象" tabindex="-1"><a class="header-anchor" href="#推动技术、产品抽象" aria-hidden="true">#</a> 推动技术、产品抽象</h4><p>弹框</p><p>token</p><h4 id="项目架构、前后分离" tabindex="-1"><a class="header-anchor" href="#项目架构、前后分离" aria-hidden="true">#</a> 项目架构、前后分离</h4><p>背景：无leader、无架构、边尝试边修改</p><p>问题：每个系统重复搭建，且架构不一</p><p>改进：</p><p>基于vue/react+webpack抽象出通用系统模板，封装token、枚举值等，多套打包配置，及时改进</p><p>新增活动系统，按需打包，各项目隔离。cli启动，自定义webpack打包前后逻辑</p><p>思考：架构是让团队专注业务开发。适时改进，贴近业务</p><h4 id="团队分工" tabindex="-1"><a class="header-anchor" href="#团队分工" aria-hidden="true">#</a> 团队分工</h4><p>背景：历史原因，项目架构不一，放养不限制风格，人员固定</p><p>问题：项目风格个人化，别人不易接手</p><p>改进：制定代码规范，均匀分配需求，写技术文档</p><p>思考：</p><p>1、团队像项目，低耦合可拆卸，才能长远发展</p><p>2、制定一个没大错的规范比没有好</p><p>3、写的代码是给别人看的，对自己也是一种监督</p><p>4、分工有度，系统负责人，减少技术债</p><h4 id="开发流程" tabindex="-1"><a class="header-anchor" href="#开发流程" aria-hidden="true">#</a> 开发流程</h4><p>背景：开发规范、产品规范薄弱</p><p>问题：甩锅接口，prd过简，团队开发效率低，延期率高</p><p>改进：推进swagger+mock，推进产品规范（抽离通用组件，一致性），git workflow &amp; 自动化发布</p><p>思考：规范推动效率，充足的时间才能保证项目质量</p><h4 id="如何写基础组件" tabindex="-1"><a class="header-anchor" href="#如何写基础组件" aria-hidden="true">#</a> 如何写基础组件</h4><p>定义好输入=&gt;输出，中间的复杂变化交给代码</p><p>满足固定逻辑： 取舍有度，不能无限制灵活（table表格）</p><p>易拓展： 不仅是枚举出来的选项，只要满足规定就可用（slot、函数），给默认值 降低耦合性、抛出必要信息给外部业务处理（input联想输入里的http请求）</p><p>代码质量： 缓存优化、加载卸载</p>',31),i=[d];function t(n,c){return a(),p("div",null,i)}const o=e(h,[["render",t],["__file","experience.html.vue"]]);export{o as default};
