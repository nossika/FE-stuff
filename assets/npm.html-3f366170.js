import{_ as a,M as s,p as o,q as c,R as n,t as e,N as t,a1 as d}from"./framework-5866ffd3.js";const l={},r=d(`<h1 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> NPM</h1><h2 id="package-json" tabindex="-1"><a class="header-anchor" href="#package-json" aria-hidden="true">#</a> package.json</h2><h3 id="module-main" tabindex="-1"><a class="header-anchor" href="#module-main" aria-hidden="true">#</a> module &amp; main</h3><p>main指向此包被外部导入时的入口文件，cjs格式；module是esm格式的入口文件。</p><h3 id="scripts" tabindex="-1"><a class="header-anchor" href="#scripts" aria-hidden="true">#</a> scripts</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>scripts: {
	&quot;foo&quot;: &quot;node bin/foo.js --hot&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在包根目录可通过<code>npm run foo</code>来快捷执行script中test指向的命令<code>node bin/foo.js --hot</code>，在<code>foo.js</code>中可用process.argvs读取到命令行参数<code>--hot</code>。</p>`,7),p=n("code",null,"postinstall",-1),m=n("code",null,"npm install",-1),u={href:"https://docs.npmjs.com/misc/scripts",target:"_blank",rel:"noopener noreferrer"},b=d(`<h2 id="bin" tabindex="-1"><a class="header-anchor" href="#bin" aria-hidden="true">#</a> bin</h2><p>一些npm包能以可执行文件的方式去运行，比如webpack、create-react-app等。</p><p>要使包能以可执行文件形式调用，需要配置package.json里的bin字段。</p><p>举个例子：</p><p>比如要创建一个叫my-bin的公共npm包，初始化my-bin项目，在项目中创建一个可执行文件<code>/bin/cli.js</code>，并在package.json中配置bin字段，发布到npm。</p><blockquote><p><code>cli.js</code>中的文件首行应加上<code>#!/usr/bin/env node</code>表示该脚本以node环境运行</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// my-bin 的 package.json
bin: {
	&quot;my-bin&quot;: &quot;bin/cli.js&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户在自己项目执行<code>npm i my-bin</code>后，npm会将之前的<code>cli.js</code>复制到项目根目录下的<code>/node_module/.bin</code>，并重命名为<code>my-bin</code>；如果执行全局安装<code>npm i -g my-bin</code>，则会将其安装到全局的node目录下。</p><p>用户可以在项目根目录打开命令行手动调用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ ./node_module/.bin/my-bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来执行my-bin，也可以写在package.json的script中来调用（script里不必写出my-bin的完整路径，因为<code>npm run test</code>时已经把<code>./node_module/.bin</code>添加到环境依赖了）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 用户项目 的 package.json
scripts: {
	&quot;test&quot;: &quot;my-bin&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是全局安装，node已经默认把全局目录下的bin写进环境依赖了，直接在命令行里</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ my-bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>就能调用。</p><h2 id="npm-install" tabindex="-1"><a class="header-anchor" href="#npm-install" aria-hidden="true">#</a> npm install</h2><ul><li><p><code>npm i</code>：安装package.json中所有dependencies和devDependencies</p></li><li><p><code>npm i --production</code>：仅安装dependencies</p></li><li><p><code>npm i [module] [-S/-D] [-g]</code>：安装指定[module]到此目录下的node_modules，-S/-D表示并记录到package.json，-g表示是否安装到全局</p></li><li><p><code>npm uninstall [module] [-g]</code>：卸载指定[module]</p></li></ul>`,17);function h(v,g){const i=s("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[e("scripts中有些特定脚本会在时机满足时自动运行，比如"),p,e("脚本会自动运行于"),m,e("完成后。特定脚本可在官网"),n("a",u,[e("npm-scripts"),t(i)]),e("查阅。")]),b])}const _=a(l,[["render",h],["__file","npm.html.vue"]]);export{_ as default};
