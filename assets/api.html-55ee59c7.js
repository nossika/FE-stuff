import{_ as s,p as a,q as n,a1 as e}from"./framework-5866ffd3.js";const t={},p=e(`<h1 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h1><h2 id="进程" tabindex="-1"><a class="header-anchor" href="#进程" aria-hidden="true">#</a> 进程</h2><h3 id="child-process" tabindex="-1"><a class="header-anchor" href="#child-process" aria-hidden="true">#</a> child_process</h3><p>子进程调用和通信</p><ul><li><p>exec：shell方式调用子进程，输出值默认有maxBuffer限制，一般用于获取执行结果而非大量数据。</p></li><li><p>spawn：原理类似exec，监听stdout输出流来获取数据，可用于产生大量数据的进程。</p></li><li><p>fork：针对node子进程的特殊spawn，以较高效率的IPC管道通信，可用process.send(data)和process.on(&#39;message&#39;, callback)通信。</p></li></ul><h3 id="cluster" tabindex="-1"><a class="header-anchor" href="#cluster" aria-hidden="true">#</a> cluster</h3><p>node的集群管理模块。</p><p>一般以cpu核数来执行cluster.fork，来生成对应数量的worker进程。通过cluster.isMaster来区分master进程和worker进程</p><p>cluster.fork基于child_process.fork实现。所以master和worker间也是以IPC通信。与child_process.fork不同，cluster.fork生成的多个worker可以监听同一端口。</p><h2 id="fs模块" tabindex="-1"><a class="header-anchor" href="#fs模块" aria-hidden="true">#</a> fs模块</h2><h3 id="日志" tabindex="-1"><a class="header-anchor" href="#日志" aria-hidden="true">#</a> 日志</h3><p>日志一般以文件形式存储在磁盘。如果每次日志变更都去读写，可能会造成频繁的磁盘IO，可以先把日志存在内存，再定时写入磁盘。</p><p>相关API：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建stream，以追加模式写入文件</span>
<span class="token keyword">const</span> stream <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;./access.log&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">flags</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> logCache <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>

<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 往stream里定时写入缓存的日志</span>
  stream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>logCache<span class="token punctuation">)</span><span class="token punctuation">;</span>
  logCache <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 业务代码中，记录日志到缓存</span>
<span class="token function">onAccess</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  logCache <span class="token operator">+=</span> data <span class="token operator">+</span> <span class="token string">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http模块" tabindex="-1"><a class="header-anchor" href="#http模块" aria-hidden="true">#</a> http模块</h2>`,15),c=[p];function o(i,r){return a(),n("div",null,c)}const u=s(t,[["render",o],["__file","api.html.vue"]]);export{u as default};
