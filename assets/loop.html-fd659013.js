import{_ as e,M as o,p,q as c,R as n,t as s,N as t,a1 as l}from"./framework-5866ffd3.js";const i="/FE-stuff/assets/node-1eb3ad69.png",u={},r=n("h1",{id:"事件循环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件循环","aria-hidden":"true"},"#"),s(" 事件循环")],-1),k=n("h2",{id:"nodejs的事件循环",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nodejs的事件循环","aria-hidden":"true"},"#"),s(" NodeJS的事件循环")],-1),d={href:"/js/thread?id=%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF",target:"_blank",rel:"noopener noreferrer"},m=l('<ul><li>timers：这个阶段执行timer（setTimeout、setInterval）的回调</li><li>I/O callbacks：执行上轮poll阶段遗留的callback</li><li>idle, prepare：仅node内部使用</li><li>poll：先执行poll队列的callback（I/O事件的回调）；有到期timer跳转timers阶段，有setImmediate跳转check阶段，两者都无时node可能会在此阶段轮询来等待I/O事件返回</li><li>check：执行 setImmediate() 的回调</li><li>close callbacks：执行 socket 的 close 事件回调</li></ul><p>这里<strong>每个的阶段间隙都会检查并执行nexttick和microtask</strong></p><p><img src="'+i+`" alt="event loop"></p><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;timeout 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;timeout 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;promise 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上例子在浏览器，以及node(v11及以上版本)中运行结果：</p><p>timeout 1 / promise 1 / timeout 2 / promise 2</p><p>在node(v10及以下版本)中运行结果：</p><p>timeout 1 / timeout 2 / promise 1 / promise 2</p><p>因为在timers阶段统一检查当前是否有到期的定时器任务，有的话会把它们放在同一次task中执行，并在task间隙执行清空microtask。</p>`,10),v={href:"https://github.com/nodejs/node/pull/22842",target:"_blank",rel:"noopener noreferrer"};function h(_,f){const a=o("ExternalLinkIcon");return p(),c("div",null,[r,k,n("p",null,[s("和"),n("a",d,[s("【事件循环（浏览器）】"),t(a)]),s("略有不同，NodeJS中的事件循环把一次循环分为多个阶段，基于libuv库实现")]),m,n("blockquote",null,[n("p",null,[s("node v11在"),n("a",v,[s("pr22842"),t(a)]),s("对于同源宏任务的处理做了修改，以和浏览器行为一致。即一个宏任务执行完就执行微任务队列，而非当前全部同源宏任务都执行完再执行微任务。")])])])}const b=e(u,[["render",h],["__file","loop.html.vue"]]);export{b as default};
