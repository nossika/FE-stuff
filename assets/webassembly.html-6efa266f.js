import{_ as s,p as a,q as n,a1 as e}from"./framework-5866ffd3.js";const t={},p=e(`<h1 id="webassembly" tabindex="-1"><a class="header-anchor" href="#webassembly" aria-hidden="true">#</a> WebAssembly</h1><p>WebAssembly允许在浏览器中运行一些低级别但性能更高的语言（比如C语言），适合一些需要大量复杂计算的场景，比如游戏。</p><h2 id="在浏览器中使用" tabindex="-1"><a class="header-anchor" href="#在浏览器中使用" aria-hidden="true">#</a> 在浏览器中使用</h2><ol><li><p>将其他语言编写的模块编译成wasm文件</p></li><li><p>在JS中引入wasm（在浏览器还未实现<code>&lt;script type=&quot;module&quot;/&gt;</code>前，用fetch引入）</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bytes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>wasmUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">arrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>使用WebAssembly解析二进制文件为module</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> module <span class="token operator">=</span> <span class="token keyword">await</span> WebAssembly<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>实例化module</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">await</span> WebAssembly<span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>使用实例上提供的方法</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> exports <span class="token operator">=</span> instance<span class="token punctuation">.</span>exports<span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的add方法来自原始模块中的定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[p];function c(l,i){return a(),n("div",null,o)}const r=s(t,[["render",c],["__file","webassembly.html.vue"]]);export{r as default};
