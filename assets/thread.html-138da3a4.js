import{_ as p,M as o,p as c,q as i,R as n,t as s,N as t,a1 as a}from"./framework-5866ffd3.js";const l="/FE-stuff/assets/browser-dc09323c.png",r={},u=a('<h1 id="单线程的js" tabindex="-1"><a class="header-anchor" href="#单线程的js" aria-hidden="true">#</a> 单线程的JS</h1><h2 id="几个基本概念" tabindex="-1"><a class="header-anchor" href="#几个基本概念" aria-hidden="true">#</a> 几个基本概念</h2><h3 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程" aria-hidden="true">#</a> 进程和线程</h3><p>进程是系统分配资源的最小单位，线程是系统运算和调度的最小单位。一个进程内可有单或多个线程，进程和线程都由操作系统管理。</p><p>通俗点说就是系统把内存资源分配给各进程，得到执行程序的空间，进程中的各线程再使用CPU资源，来实际执行程序。</p><p>进程切换消耗比线程切换大，涉及虚拟内存地址的转换。因为每个进程都有专属的、地址连续的内存空间，这块内存是由操作系统抽象给进程的，称为虚拟内存，可通过页表映射到物理内存。</p><h3 id="协程" tabindex="-1"><a class="header-anchor" href="#协程" aria-hidden="true">#</a> 协程</h3><p>协程是更轻量的运算单位，由<strong>程序</strong>基于线程去创建和调度（一般在语言层实现，比如go、python等），操作系统对协程的存在无感知。可能是一个线程对应多个协程，也可能是多个线程对应多个协程，协程间的切换可以不依赖线程切换，取决于程序的设计。</p><p>go语言的协程，栈空间在KB级，而线程的栈空间一般在MB级。</p><h3 id="并发、并行" tabindex="-1"><a class="header-anchor" href="#并发、并行" aria-hidden="true">#</a> 并发、并行</h3><p>并发是<strong>一定时间段内</strong>完成多条指令。比如有3个耗时0.5s的运算，程序通过资源调度在0.6s内完成了这3个原本总和需要1.5s的运算，称为并发。浏览器中，JS的事件循环通过对多线程的调度即可实现并发。</p><p>并行是<strong>同一时间点</strong>有多条指令在同时执行，所以其前提必须是多核CPU。NodeJS中可以通过cluster模块来利用多核CPU实现并行。</p><h2 id="nodejs中的并发" tabindex="-1"><a class="header-anchor" href="#nodejs中的并发" aria-hidden="true">#</a> NodeJS中的并发</h2><p>node中仅JS主线程是单线程，有自己的工作池线程，主线程遇到异步任务（定时器、磁盘IO、网络请求等），会交给工作池线程执行。</p><p>因为web服务并发的瓶颈是IO而非CPU计算，node对于IO的异步设计，天然可应对并发场景。</p><p>可以用cluster模块实现多进程，充分利用CPU核数。多个进程监听同一端口（其实只有一个主进程监听，其他进程和这个主进程IPC通信），把端口的请求负载均衡到各个进程。</p><h2 id="worker线程" tabindex="-1"><a class="header-anchor" href="#worker线程" aria-hidden="true">#</a> worker线程</h2>',17),d={href:"https://html.spec.whatwg.org/multipage/workers.html#workers",target:"_blank",rel:"noopener noreferrer"},k=a('<p>各个worker线程间通信是靠postMessage方法，把数据结构化克隆后传递给另一线程，有些数据是无法克隆的（比如函数），因为它们有各自的执行内存（除了一些内存共享的特殊数据结构，比如SharedArrayBuffer）。</p><blockquote><p>线程间通信需要复制数据，稍有些别扭，可能因为JS整个语言体系就是基于单线程的，每个JS线程都有自己的执行内存。不像一些天生被设计为支持多线程的语言（比如go），新线程默认共享当前的执行上下文，也就减少复制数据来的麻烦。</p></blockquote><h2 id="多进程的浏览器" tabindex="-1"><a class="header-anchor" href="#多进程的浏览器" aria-hidden="true">#</a> 多进程的浏览器</h2><p>浏览器一般是多进程的应用。以chrome为例</p><p>包含进程有（shift+esc可查看）：</p><ul><li>浏览器主进程</li><li>GPU进程：GPU加速</li><li>tab页进程：每个tab页对应一个进程</li><li>扩展程序（第三方插件）进程</li></ul><p>页面进程中又包含多个线程：</p><ul><li>JS引擎线程</li><li>GUI渲染线程：DOM渲染</li><li>事件控制线程：实现event loop</li><li>定时触发器线程：setTimeout、setInterval等计时器</li><li>网络请求线程：如http请求</li><li>webWorker线程（sharedWorker线程归属浏览器主进程）</li></ul><p>JS线程与GUI线程互斥（一个执行时另一个会被挂起），因为JS可以读取DOM的渲染数据，须保证读取到的数据准确。浏览器一般在JS线程空闲时执行layout&amp;paint，如果在JS线程执行中触发layout，JS线程会阻塞，等其执行完毕再继续。</p>',9),m={href:"/htmlcss/render.html",target:"_blank",rel:"noopener noreferrer"},v=a('<h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h2><h3 id="浏览器的事件循环" tabindex="-1"><a class="header-anchor" href="#浏览器的事件循环" aria-hidden="true">#</a> 浏览器的事件循环</h3><p>JS本身是单线程，但执行JS的环境不是。宿主一般会有JS主线程、调度线程、网络请求线程等多个线程配合来运行程序，所以单线程的JS能实现非阻塞。</p><p>浏览器中以事件循环模型来运行JS，如下图：</p><p><img src="'+l+'" alt="event loop"></p><p>事件循环模型包含执行栈（JS stack）和事件队列（event queue），由调度线程来控制整体的调度。执行栈即JS主线程，在主线程运行中，一旦遇到异步操作（比如setTimeout/http请求等）时，会交给另外的线程处理（比如setTimeout交给定时器线程、http请求交给网络请求线程），当其他线程返回结果后，调度线程会将事件推入事件队列中，按先进先出原则待主线程处理。</p><p>每一轮循环称为一个task，每轮循环的末尾还会检查并执行微任务（micro task queue）队列。</p><p>主线程空闲时（即一轮事件循坏结束），会从事件队列取出事件（如果有的话）加入执行栈执行（即进入下轮事件循环）。如果执行栈再遇到异步操作，则重复上述调度行为。</p>',8),h={href:"/node/loop.html",target:"_blank",rel:"noopener noreferrer"},b=a(`<h3 id="task-microtask" tabindex="-1"><a class="header-anchor" href="#task-microtask" aria-hidden="true">#</a> task/microTask</h3><p>事件循环中有task和microTask的概念</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	Promise<span class="token punctuation">.</span><span class="token function">resovle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>repeat<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token comment">// &#39;setTimeout&#39;永远不会被打印，因为无限执行microTask，不会进入下个loop</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果改成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">setTimeout</span><span class="token punctuation">(</span>repeat<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;setTimeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">repeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &#39;setTimeout&#39;会被打印</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行顺序</p><p>loop ( 一轮循环开始 -&gt; task -&gt; microTask -&gt; 一轮循环结束 ) =&gt; nextLoop ( 一轮循环开始 -&gt; task -&gt; microTask -&gt; 一轮循环结束 ) =&gt; nextLoop =&gt; ...</p><p>task类型: setTimeout, MessageChannel</p><p>microTask类型: Promise, MutationObserver</p><h4 id="settimeout-setinterval" tabindex="-1"><a class="header-anchor" href="#settimeout-setinterval" aria-hidden="true">#</a> setTimeout/setInterval</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loop1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// do sth.</span>
	<span class="token function">setTimeout</span><span class="token punctuation">(</span>loop1<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">loop1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">loop2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">// do sth.</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">loop2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者都表示1s执行一次的循环，区别在于这个间隔1s，它在loop1中是本次<code>do sth.</code>执行完才触发下次计时，而loop2是一直在计时（因为计时器是单独的线程，不被主线程阻塞），一次计时完毕后立刻开始下一次。当<code>do sth.</code>耗时越高它们的行为差别越明显，setInterval可能连续多次触发<code>do sth.</code>。</p><h3 id="webworker" tabindex="-1"><a class="header-anchor" href="#webworker" aria-hidden="true">#</a> WebWorker</h3><h4 id="worker" tabindex="-1"><a class="header-anchor" href="#worker" aria-hidden="true">#</a> Worker</h4><p>用法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;./worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;main msg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
worker<span class="token punctuation">.</span><span class="token function">onmessage</span><span class="token punctuation">(</span><span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	msg<span class="token punctuation">;</span> <span class="token comment">// &#39;worker msg&#39;</span>
	<span class="token comment">// workder.terminate();  </span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// worker.js</span>
<span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">msg</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	msg<span class="token punctuation">;</span> <span class="token comment">//  &#39;main msg&#39;</span>
	<span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">&#39;worker msg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Worker会独立开启一个线程执行，不占用主线程资源，post出来的数据推入事件队列待主线程处理。</p><h4 id="sharedworker" tabindex="-1"><a class="header-anchor" href="#sharedworker" aria-hidden="true">#</a> SharedWorker</h4><p>用法同Worker，区别在于SharedWorker是独立进程，多tab页可共享一个</p>`,19);function g(f,w){const e=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[n("a",d,[s("HTML标准"),t(e)]),s("中规定了worker线程的实现。node环境也实现了worker线程。worker是独立于主线程的线程。")]),k,n("blockquote",null,[n("p",null,[s("渲染相关详见"),n("a",m,[s("【页面渲染】"),t(e)]),s("。")])]),v,n("blockquote",null,[n("p",null,[s("NodeJS中的事件循环略有不同，详见"),n("a",h,[s("【事件循环（NodeJS）】"),t(e)])])]),b])}const x=p(r,[["render",g],["__file","thread.html.vue"]]);export{x as default};
