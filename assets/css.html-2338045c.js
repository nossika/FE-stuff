import{_ as i,M as t,p as l,q as p,R as n,t as s,N as c,a1 as a}from"./framework-5866ffd3.js";const o="/FE-stuff/assets/z-index-5e432b54.png",d={},r=a('<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h1><h2 id="布局方式" tabindex="-1"><a class="header-anchor" href="#布局方式" aria-hidden="true">#</a> 布局方式</h2><ul><li><p>经典流式: position &amp; float</p></li><li><p>flex</p></li><li><p>gird</p></li></ul><h2 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型" aria-hidden="true">#</a> 盒模型</h2><p>一个元素的盒模型由 content + padding + border + margin 组成</p><p>设置border-box来改变盒模型的展示:</p><ul><li>content-box（默认）: 元素width/height的值就是其contnet宽度/高度</li><li>border-box: 元素width/height的值是其content + padding + border三者之和</li></ul><h2 id="层叠上下文" tabindex="-1"><a class="header-anchor" href="#层叠上下文" aria-hidden="true">#</a> 层叠上下文</h2><p>以下元素会成为层叠上下文：</p><ul><li>html根元素</li><li>元素有z-index &amp;&amp; （position非relative || flex的直接子元素）</li><li>opacity小于1、有transform等，被硬件加速独立的图层</li></ul><p>在判断两个元素堆叠情况时：</p><ol><li><p>两者若在同层的层叠上下文中，按z-index大的在上、后来居上的原则。具体层叠顺序从下到上：负z-index/block/float/inline/z-index:auto/正z-index。</p></li><li><p>两者若不在同层的层叠上下文中，则寻找它们处于同层的祖先层叠上下文，按1的规则比较这两个祖先，祖先的顺序就是它们的顺序。</p></li></ol><p><img src="'+o+'" alt="z-index"></p><p>比如以上这种情况，3个div如果位置重合，从下到上的堆叠顺序并非1-2-3，而是1-3-2，2会覆盖在z-index更大的3之上，因为3和2比较时是拿同层的1去和2比较的。</p><h2 id="bfc-块格式化上下文" tabindex="-1"><a class="header-anchor" href="#bfc-块格式化上下文" aria-hidden="true">#</a> BFC（块格式化上下文）</h2><p>满足下列条件之一的元素会成为BFC：</p><ul><li>html根元素</li><li>overflow: 非visible</li><li>float: 非none</li><li>position: absolute或fixed</li><li>display: inline-block</li><li>display: flow-root</li><li>很多</li></ul><p>特性：</p><ul><li>外部margin不合并（同属一个BFC的子元素间的margin会合并，当子元素自己也是BFC时则不合并）</li><li>内部清除浮动（高度不塌陷，内部的浮动元素可以撑开高度）</li><li>外部清除浮动（外部的浮动元素可能会挤开元素内文字造成环绕效果，设为BFC后内部文字就不再被挤开）</li></ul><h2 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h2><h3 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h3><p>优先级顺序：</p><ol><li><p><code>!important</code></p></li><li><p><code>#id</code></p></li><li></li><li><p><code>:hove</code></p></li><li><p><code>[data=&quot;value&quot;]</code></p></li><li><p><code>.class</code></p></li><li></li><li><p><code>::before</code></p></li><li><p><code>div</code></p></li></ol><p>当多条css规则的属性冲突时，以选择器合计优先级最高的那条规则为准。且直接定义在目标元素上的样式，永远高于从父级继承的（即使父级的那条规则优先级更高）。</p><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h3><p>选择器性能从高到低：</p><ol><li>ID, <code>#header</code></li><li>Class, <code>.promo</code></li><li>Type, <code>div</code></li><li>Adjacent sibling, <code>h2 + p</code></li><li>Child, <code>li &gt; ul</code></li><li>Descendant, <code>ul a</code></li><li>Universal, <code>*</code></li><li>Attribute, <code>[type=&quot;text&quot;]</code></li><li>Pseudo-classes/-elements, <code>a:hover</code></li></ol><p>出于性能考虑，由于CSS规则匹配时是从右往左，应该尽量把性能高的、更具体的规则写到最右，尽快尽早把非目标元素过滤掉。</p><h2 id="repaint-reflow" tabindex="-1"><a class="header-anchor" href="#repaint-reflow" aria-hidden="true">#</a> repaint &amp; reflow</h2><p>一般元素的css属性改变都会引发reflow&amp;repaint，除了少数只触发repaint的属性: transform/visibility/background等。</p><p>浏览器一般也会对渲染做优化，对元素样式的修改都被推入队列，当一定时间或者累积一定数量时，才会对其进行一次批量处理，这样多次样式修改操作只需要一次reflow&amp;repaint。</p><p>当访问一些布局相关的信息的API时，比如clientWidth、offsetWidth、scrollWidth、getComputedStyle()等，浏览器为保证获取到的数据正确，会立刻清空队列进行一次reflow&amp;repaint。</p>',32),u={href:"/performance/render.html",target:"_blank",rel:"noopener noreferrer"},h=a(`<h2 id="css-api" tabindex="-1"><a class="header-anchor" href="#css-api" aria-hidden="true">#</a> CSS API</h2><h3 id="css变量" tabindex="-1"><a class="header-anchor" href="#css变量" aria-hidden="true">#</a> CSS变量</h3><p>变量定义和使用</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root</span> <span class="token punctuation">{</span>
  <span class="token property">--main-color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">selector1</span> <span class="token punctuation">{</span>
  <span class="token property">--main-color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">selector2</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>元素使用的css变量如果在多个选择器中定义，遵从css选择器优先级规则，取对该元素优先级最高的选择器中的定义</p><h3 id="css-houdini" tabindex="-1"><a class="header-anchor" href="#css-houdini" aria-hidden="true">#</a> CSS Houdini</h3><p>开放CSS的API给开发者，使得能够用编程的方式来控制渲染过程（layout/paint等）。</p><p>例如定义一个layout：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">registerLayout</span><span class="token punctuation">(</span><span class="token string">&#39;my-display&#39;</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">inputProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;height&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  <span class="token function">layout</span><span class="token punctuation">(</span><span class="token parameter">children<span class="token punctuation">,</span> constraintSpace<span class="token punctuation">,</span> styleMap<span class="token punctuation">,</span> breakToken</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle layout</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">div </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> <span class="token function">layout</span><span class="token punctuation">(</span><span class="token string">&#39;my-display&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="预处理器-如sass-less" tabindex="-1"><a class="header-anchor" href="#预处理器-如sass-less" aria-hidden="true">#</a> 预处理器（如sass/less）</h3><h4 id="sass" tabindex="-1"><a class="header-anchor" href="#sass" aria-hidden="true">#</a> sass</h4><p>嵌套</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">parent </span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token selector"><span class="token parent important">&amp;</span>.red </span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">child </span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量定义和使用</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector"><span class="token variable">$main-color</span> = #ddd

selector </span><span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$main-color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数定义和使用</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token keyword">@mixin</span> <span class="token function">rounded</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$radius</span></span><span class="token punctuation">:</span> 4px<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>
  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">selector </span><span class="token punctuation">{</span>
  <span class="token keyword">@include</span> <span class="token function">rounded</span><span class="token punctuation">(</span>6px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模块化</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token keyword">@import</span> <span class="token string">&quot;./path/to/common.scss&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="后处理器-如postcss" tabindex="-1"><a class="header-anchor" href="#后处理器-如postcss" aria-hidden="true">#</a> 后处理器（如PostCSS）</h3><h3 id="移动端" tabindex="-1"><a class="header-anchor" href="#移动端" aria-hidden="true">#</a> 移动端</h3><h4 id="flexible方案" tabindex="-1"><a class="header-anchor" href="#flexible方案" aria-hidden="true">#</a> flexible方案</h4><p>通过dpr来设置根节点的font-size + viewport的scale，页面使用设计图尺寸转换得到的rem，完成一个设计图到多种屏幕的适配</p><h2 id="css场景" tabindex="-1"><a class="header-anchor" href="#css场景" aria-hidden="true">#</a> CSS场景</h2><h3 id="元素居中" tabindex="-1"><a class="header-anchor" href="#元素居中" aria-hidden="true">#</a> 元素居中</h3><h3 id="左边定宽右边自适应" tabindex="-1"><a class="header-anchor" href="#左边定宽右边自适应" aria-hidden="true">#</a> 左边定宽右边自适应</h3><p>flex、calc、absolute</p><h3 id="retina画0-5px" tabindex="-1"><a class="header-anchor" href="#retina画0-5px" aria-hidden="true">#</a> retina画0.5px</h3><p>dpr（window.devicePixelRatio）+ <code>&lt;mete name=&quot;viewport&quot;/&gt;</code>(initial-scale)</p><h3 id="无限滚动的轮播图" tabindex="-1"><a class="header-anchor" href="#无限滚动的轮播图" aria-hidden="true">#</a> 无限滚动的轮播图</h3>`,32);function v(k,b){const e=t("ExternalLinkIcon");return l(),p("div",null,[r,n("blockquote",null,[n("p",null,[s("详见"),n("a",u,[s("【浏览器渲染】"),c(e)])])]),h])}const f=i(d,[["render",v],["__file","css.html.vue"]]);export{f as default};
