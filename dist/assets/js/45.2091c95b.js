(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{443:function(t,e,a){"use strict";a.r(e);var r=a(54),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"graphql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#graphql"}},[t._v("#")]),t._v(" GraphQL")]),t._v(" "),a("h2",{attrs:{id:"query-mutation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-mutation"}},[t._v("#")]),t._v(" Query/Mutation")]),t._v(" "),a("p",[t._v("GraphQL客户端使用Query/Mutation获取数据，请求参数(同时也是返回的数据结构)根据Schema来组装")]),t._v(" "),a("p",[t._v("query")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('query {\n\tviewer { // 对象\n\t\tname, // string数据\n\t\trespos (first: 10, after: "cursorString") { // 对象数据，需要另开connection，返回respo列表，first：列表数量；after：分页标记；以及其他支持的查询条件\n\t\t\tedges {\n\t\t\t\tcursor // 分页标记\n\t\t\t\tnode { // 每条数据的结构\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t\tpageInfo { // 分页相关信息\n\t\t\t\thasNextPage\n\t\t\t}\n\t\t\t} \n\t\t\trespo (name: "aaa") { // connection，返回指定name的respo或者null\n\t\t\t\tcreatedAt\n\t\t\t}\n\t}\n}\n\nvariables { // 定义变量。在上面用$something使用\n\t"something": {\n\t\t\t"name": "bbb"\n\t}\n}\n')])])]),a("h2",{attrs:{id:"schema"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#schema"}},[t._v("#")]),t._v(" Schema")]),t._v(" "),a("p",[t._v("GraphQL服务端使用Schema定义数据的组成、结构")]),t._v(" "),a("h2",{attrs:{id:"resolver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resolver"}},[t._v("#")]),t._v(" Resolver")]),t._v(" "),a("p",[t._v("GraphQL服务端使用Resolver定义Schema中的数据(字段)如何获取")])])}),[],!1,null,null,null);e.default=n.exports}}]);