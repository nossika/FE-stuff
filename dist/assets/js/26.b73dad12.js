(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{419:function(t,a,r){"use strict";r.r(a);var e=r(54),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"编程范式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编程范式"}},[t._v("#")]),t._v(" 编程范式")]),t._v(" "),r("h2",{attrs:{id:"函数式编程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程"}},[t._v("#")]),t._v(" 函数式编程")]),t._v(" "),r("p",[t._v("缩写FP（functional programming）")]),t._v(" "),r("p",[t._v("在FP世界中，一切都由规则（函数）构成，它们内部没有状态，也没有随机值，运行不产生副作用，给定初始状态就能得到一个确定的终止状态；复杂的规则可以由多个简单规则去组装而成，组装后的规则同样满足上述特性；给FP体系初始值以后，不需要再去干预内部运行，其整套运行轨迹和结果都是可被预测的。")]),t._v(" "),r("h2",{attrs:{id:"面向对象编程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#面向对象编程"}},[t._v("#")]),t._v(" 面向对象编程")]),t._v(" "),r("p",[t._v("缩写OOP（Object-oriented programming）")]),t._v(" "),r("p",[t._v("OOP的思想是，定义好一个个的独立个体，它们有自己的状态、方法，可以互相通信；需要命令去控制它们，让它们运行起来。")])])}),[],!1,null,null,null);a.default=s.exports}}]);